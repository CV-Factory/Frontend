{
  "article": {
    "title": "AI 자기소개서 생성기, CVFactory 개발기 (부제: 아이디어부터 배포까지)",
    "published": false,
    "body_markdown": "## 안녕하세요!\\n\\n오늘은 제가 최근에 진행한 사이드 프로젝트, 'CVFactory'에 대한 이야기를 공유해볼까 합니다. CVFactory는 채용 공고와 자신의 경험을 입력하면 AI가 맞춤형 자기소개서 초안을 만들어주는 웹 서비스입니다.\\n\\n이 글에서는 **왜 이 프로젝트를 시작하게 되었는지**, 그리고 이 작은 서비스를 세상에 내놓기까지 **어떤 고민과 시행착오를 거쳤는지** 솔직하게 이야기해보려 합니다.\\n\\n### **1. 개발 동기: \"왜 AI 자기소개서 생성기를 만들었나요?\"**\\n\\n개발자라면 누구나 '이런 거 하나 만들어보고 싶다' 하는 아이디어가 하나쯤은 있을 겁니다. 저에게는 '자기소개서 작성'이 바로 그런 주제였습니다.\\n\\n*(여기서부터는 실제 경험을 바탕으로 내용을 채워주시면 좋습니다! 아래는 제가 예상해본 동기입니다.)*\\n\\n*   **가설 1: 반복 작업의 자동화:** 취업이나 이직을 준비하며 수많은 자기소개서를 쓰다 보니, 반복되는 부분이 많다는 것을 느꼈습니다. '이 지루한 과정을 기술로 해결할 수 없을까?' 하는 생각이 프로젝트의 시작이었습니다.\\n*   **가설 2: 최신 기술 탐구:** 요즘 가장 핫한 AI, 특히 대규모 언어 모델(LLM)을 활용해서 뭔가 의미 있는 결과물을 만들어보고 싶었습니다. 마침 '채용'이라는 도메인이 AI와 잘 맞아떨어진다고 생각했습니다.\\n*   **가설 3: 풀스택 경험:** 웹 개발의 전체 흐름(프론트엔드, 백엔드, 데이터베이스, 배포)을 혼자서 모두 경험하고 싶었습니다. Django, Docker, 그리고 Northflank까지, 평소에 써보고 싶었던 기술들을 마음껏 사용해볼 기회라고 생각했습니다.\\n\\n**💬 질문 1: 어떤 계기로 이 프로젝트를 시작하게 되셨나요? 위의 가설 중에 마음에 드시는 것이나, 혹은 전혀 다른 동기가 있다면 자유롭게 말씀해주세요.**\\n\\n### **2. 기술 스택과 아키텍처: \"어떤 기술로 만들었나요?\"**\\n\\n이 프로젝트는 다음과 같은 기술 스택으로 구성되어 있습니다.\\n\\n*   **백엔드:** Django\\n*   **프론트엔드:** HTML, CSS, JavaScript (Vanilla)\\n*   **데이터베이스:** SQLite (개발용), PostgreSQL (프로덕션용)\\n*   **배포:** Docker, Northflank, Cloudflare\\n\\n전체적인 구조는 사용자가 프론트엔드에서 정보를 입력하면, Django 백엔드가 AI API와 통신하여 결과를 받아와 다시 사용자에게 보여주는 간단한 형태입니다. 배포는 Docker 이미지를 빌드하여 Northflank에서 서비스하는 방식으로 자동화했습니다.\\n\\n### **3. 개발 과정의 시행착오: \"어떤 어려움이 있었나요?\"**\\n\\n모든 프로젝트가 그렇듯, CVFactory 개발도 순탄하지만은 않았습니다. 제가 겪었던 몇 가지 주요 시행착오를 공유합니다.\\n\\n*   **시행착오 1: Django 정적 파일(Static Files)과의 싸움**\\n    *   **문제:** 로컬 개발 환경(`DEBUG=True`)에서는 잘만 보이던 CSS와 JavaScript 파일이 실제 서버 환경(`DEBUG=False`)에서는 전혀 적용되지 않았습니다.\\n    *   **과정:** Django의 정적 파일 처리 방식에 대해 다시 공부해야 했습니다. `STATIC_ROOT`, `collectstatic` 명령어의 역할을 이해하고, 최종적으로는 `Whitenoise` 라이브러리를 도입하여 문제를 해결했습니다. 이 과정을 통해 Django의 배포 환경 구성을 더 깊이 이해하게 되었습니다.\\n\\n*   **시행착오 2: 불어나는 Docker 이미지 용량**\\n    *   **문제:** 처음 작성한 Dockerfile로 이미지를 빌드하니 용량이 수백 MB를 훌쩍 넘었습니다. 간단한 웹 서비스치고는 너무 무겁다고 생각했습니다.\\n    *   **과정:** `.dockerignore` 파일을 설정하여 불필요한 파일들이 이미지에 포함되지 않도록 하고, `python:3.8-slim-buster` 같은 가벼운 베이스 이미지를 사용했습니다. 멀티 스테이지 빌드(multi-stage build) 같은 기술을 적용해 최종 이미지 크기를 최적화했습니다.\\n\\n*   **시행착오 3: 낯선 배포 환경, Northflank**\\n    *   **문제:** Heroku 유료화 이후, 사이드 프로젝트를 위한 마땅한 무료 배포 플랫폼을 찾기가 어려웠습니다.\\n    *   **과정:** 여러 PaaS를 검토하다가 Docker와 GitHub 연동이 편리한 Northflank를 선택했습니다. `northflank.json` 설정 파일을 통해 빌드와 배포를 코드로 관리하고, `Cloudflare` 캐시를 자동으로 비우는 `purge_cloudflare_cache.py` 스크립트를 추가하여 배포 파이프라인을 완성했습니다.\\n\\n**💬 질문 2: 위 내용 외에, 개발 과정에서 특히 기억에 남는 어려움이 있었나요? 예를 들어, AI 모델 API를 연동하면서 겪었던 문제(예: 응답 시간, 비용, 프롬프트 엔지니어링 등)나 프론트엔드 UI/UX를 구성하며 고민했던 부분이 있다면 알려주세요. 더 생생한 경험담이 될 것 같습니다.**\\n\\n### **4. 글을 마치며**\\n\\nCVFactory는 작은 프로젝트지만, 아이디어를 현실로 만드는 과정에서 정말 많은 것을 배울 수 있었습니다. 특히 단순히 코드를 짜는 것을 넘어, Docker 컨테이너화, Northflank를 이용한 배포 자동화 파이프라인을 직접 구축해본 경험은 무엇과도 바꿀 수 없는 자산이 되었습니다.\\n\\n이 글을 읽는 여러분도 머릿속에만 담아두었던 아이디어가 있다면, 일단 작게라도 시작해보는 것을 강력히 추천합니다. 그 과정에서 겪는 수많은 '삽질'들이 결국 여러분을 더 뛰어난 개발자로 만들어줄 테니까요!",
    "tags": ["korean", "django", "docker", "ai"]
  }
} 