# Django 기본 설정
# 개발 환경에서는 DEBUG=True, 프로덕션 환경에서는 DEBUG=False로 설정
DEBUG=False 
# Django SECRET_KEY - 프로덕션에서는 반드시 강력한 랜덤값으로 변경
DJANGO_SECRET_KEY=django-insecure-CHANGE_THIS_TO_A_SECURE_VALUE
# 쉼표로 구분된 호스트 목록 - 개발: localhost,127.0.0.1, 프로덕션: 실제 도메인
ALLOWED_HOSTS=example.com,www.example.com

# API 키 설정 (API 엔드포인트 인증에 사용)
API_KEY=your-api-key-here

# Google OAuth 설정
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# Groq API 설정 (자기소개서 생성)
GROQ_API_KEY=your-groq-api-key

# CSRF 및 보안 설정
# True: 세션에 CSRF 토큰 저장, False: 쿠키에 저장
CSRF_USE_SESSIONS=False 
# True: JavaScript에서 쿠키에 접근할 수 없음 (보안 강화)
CSRF_COOKIE_HTTPONLY=False 
# True: HTTPS 연결에서만 쿠키 전송 (프로덕션 환경)
CSRF_COOKIE_SECURE=True 
# 'Lax': 일반적인 보안, 'Strict': 최고 보안, 'None': 크로스 사이트 허용
CSRF_COOKIE_SAMESITE=Lax 
# 쉼표로 구분, 프로토콜 포함 (개발: http://, 프로덕션: https://)
CSRF_TRUSTED_ORIGINS=https://example.com,https://www.example.com 

# CORS 설정
# True: 모든 도메인 허용 (개발 환경), False: 특정 도메인만 허용 (프로덕션)
CORS_ALLOW_ALL_ORIGINS=False 
# 쉼표로 구분, 프로토콜 포함 (개발: http://, 프로덕션: https://)
CORS_ALLOWED_ORIGINS=https://example.com,https://www.example.com 

# 미들웨어 설정
# True: CSRF 미들웨어 활성화, False: 비활성화 (개발 시에만)
ENABLE_CSRF_MIDDLEWARE=True 

# 로깅 레벨 설정 (DEBUG, INFO, WARNING, ERROR, CRITICAL)
# 개발 환경: DEBUG, 프로덕션 환경: INFO 또는 WARNING
LOG_LEVEL=INFO

# Selenium WebDriver 설정 (도커 환경)
SELENIUM_DRIVER_EXECUTABLE_PATH=/usr/bin/chromedriver

# 환경 전환 방법:
# 1. 환경 설정 파일 생성: `cp .env.example .env.development` 및 `cp .env.example .env.production`
# 2. 각 환경 파일을 적절히 수정
# 3. 환경 전환: `./switch_env.sh development` 또는 `./switch_env.sh production` 