name: CVFactory CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set environment based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting production environment"
            cp .env.production .env
          else
            echo "Setting development environment"
            cp .env.development .env
          fi
      
      - name: Run tests
        run: |
          python manage.py test
  
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set environment based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting production environment"
            cp .env.production .env
            # 배포 환경에서는 실제 API 키 등을 GitHub Secrets에서 가져와 설정
            sed -i "s|\${SECRET_KEY}|${{ secrets.DJANGO_SECRET_KEY }}|g" .env
            sed -i "s|\${ALLOWED_HOSTS}|${{ secrets.ALLOWED_HOSTS }}|g" .env
            sed -i "s|\${GOOGLE_CLIENT_ID}|${{ secrets.GOOGLE_CLIENT_ID }}|g" .env
            sed -i "s|\${GOOGLE_CLIENT_SECRET}|${{ secrets.GOOGLE_CLIENT_SECRET }}|g" .env
            sed -i "s|\${GROQ_API_KEY}|${{ secrets.GROQ_API_KEY }}|g" .env
            sed -i "s|\${API_KEY}|${{ secrets.API_KEY }}|g" .env
            sed -i "s|\${CSRF_TRUSTED_ORIGINS}|${{ secrets.CSRF_TRUSTED_ORIGINS }}|g" .env
            sed -i "s|\${CORS_ALLOWED_ORIGINS}|${{ secrets.CORS_ALLOWED_ORIGINS }}|g" .env
          else
            echo "Setting development environment"
            cp .env.development .env
            # 개발 환경에서는 더미 API 키 설정
            sed -i "s|your-google-client-id-here|dummy-dev-client-id|g" .env
            sed -i "s|your-google-client-secret-here|dummy-dev-client-secret|g" .env
            sed -i "s|your-groq-api-key-here|dummy-dev-groq-api-key|g" .env
          fi
      
      - name: Collect static files
        run: python manage.py collectstatic --noinput
      
      - name: Run migrations
        run: python manage.py migrate --noinput
      
      - name: Create logs directory with proper permissions
        run: |
          mkdir -p logs
          chmod -R 755 logs
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .
            !.git
            !.github
  
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Deploy to Development Environment
        uses: serverless/github-action@v3
        with:
          args: deploy --stage dev
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Deploy to Production Environment
        uses: serverless/github-action@v3
        with:
          args: deploy --stage prod
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }} 