name: CVFactory CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # 수동 실행 옵션

# 권한 설정 추가
permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

jobs:
  debug-workflow:
    name: Debug Workflow Environment
    runs-on: ubuntu-latest
    steps:
      - name: Print GitHub context
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Runner: ${{ runner.os }}"
          echo "Workspace: ${{ github.workspace }}"
      
      - name: Print GitHub Actions version
        run: |
          echo "GitHub Actions runner version:"
          echo "NodeJS version: $(node --version)"
          echo "Python version: $(python3 --version)"
      
      - name: Check artifact functionality
        run: |
          mkdir -p test-debug
          echo "This is a test file for debugging purposes" > test-debug/test.txt
          cat test-debug/test.txt
        
      - name: Test artifact upload
        id: test-upload
        uses: actions/upload-artifact@v3
        with:
          name: debug-info
          path: test-debug/
          retention-days: 1
        continue-on-error: true

      - name: Report artifact test result
        run: |
          if [[ "${{ steps.test-upload.outcome }}" == "success" ]]; then
            echo "Artifact upload test: SUCCESS"
          else
            echo "Artifact upload test: FAILED"
            echo "Error: ${{ steps.test-upload.outputs.error || 'Unknown error' }}"
          fi

  test:
    name: Test Django Application
    runs-on: ubuntu-latest
    needs: debug-workflow
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: List workspace contents
        run: |
          echo "Workspace contents:"
          ls -la
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.18'
          
      - name: Verify Python installation
        run: |
          echo "Python version: $(python --version)"
          echo "Python path: $(which python)"
          echo "Pip version: $(pip --version)"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Installed Python packages:"
          pip list
      
      - name: Debug environment file
        run: |
          echo "Environment file (.env.example) contents:"
          if [ -f .env.example ]; then
            cat .env.example | grep -v "SECRET\|KEY\|PASSWORD"
          else
            echo "ERROR: .env.example file not found"
            ls -la
          fi
      
      - name: Setup environment
        run: |
          cp .env.example .env
          echo "DEBUG=True" >> .env
          echo "DJANGO_SECRET_KEY=test-key-for-ci" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1,testserver" >> .env
          echo "DB_ENGINE=django.db.backends.sqlite3" >> .env
          echo "DB_NAME=db.sqlite3" >> .env
          echo "Environment file created. Contents (excluding sensitive info):"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD"
      
      - name: Check Django project structure
        run: |
          echo "Checking Django project structure..."
          echo "Python files in root directory:"
          find . -maxdepth 1 -name "*.py" -exec ls -la {} \;
          echo "Looking for Django settings file:"
          find . -name "settings.py" -exec ls -la {} \;
          echo "Looking for Django manage.py:"
          find . -name "manage.py" -exec ls -la {} \;
      
      - name: Check Django setup
        run: |
          echo "Running Django check command..."
          python manage.py check --verbosity=2 || echo "Django check failed, but continuing..."
          echo "Checking Django version and settings module:"
          python -c "import django; print('Django version:', django.__version__)"
          python -c "import os; print('DJANGO_SETTINGS_MODULE:', os.environ.get('DJANGO_SETTINGS_MODULE', 'Not set'))"
        continue-on-error: true
      
      - name: Debug Django settings
        run: |
          echo "Debugging Django settings..."
          python -c "
          import os
          import sys
          import traceback
          
          try:
              os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cvfactory.settings')
              import django
              django.setup()
              from django.conf import settings
              
              print('DEBUG setting:', settings.DEBUG)
              print('ALLOWED_HOSTS:', settings.ALLOWED_HOSTS)
              print('DATABASE ENGINE:', settings.DATABASES['default']['ENGINE'])
              print('DATABASE NAME:', settings.DATABASES['default']['NAME'])
              print('INSTALLED_APPS:', settings.INSTALLED_APPS)
          except Exception as e:
              print('ERROR loading Django settings:', str(e))
              print('Traceback:')
              traceback.print_exc()
              sys.exit(0)  # Continue workflow despite error
          "
        continue-on-error: true
      
      - name: Run migrations
        run: |
          echo "Running Django migrations..."
          python manage.py migrate --noinput --verbosity=2 || echo "Migrations failed, but continuing..."
        continue-on-error: true
      
      - name: Run tests
        run: |
          echo "Running Django tests..."
          python manage.py test -v 2 || echo "Tests failed, but continuing..."
        continue-on-error: true
      
      - name: Save test and debug info
        if: always()
        run: |
          echo "Saving test results and debug information..."
          mkdir -p debug-info/logs
          
          # Save system information
          echo "System information:" > debug-info/system-info.txt
          uname -a >> debug-info/system-info.txt
          python --version >> debug-info/system-info.txt
          pip list >> debug-info/requirements-installed.txt
          
          # Save Django debugging information
          if [ -f .env ]; then
            cp .env debug-info/.env-sanitized
            sed -i 's/\(SECRET_KEY=\).*/\1REDACTED/' debug-info/.env-sanitized
            sed -i 's/\(PASSWORD=\).*/\1REDACTED/' debug-info/.env-sanitized
          fi
          
          # Save logs
          find . -name "*.log" -exec cp {} debug-info/logs/ \; || true
          
          # List Django apps and their migrations
          mkdir -p debug-info/migrations
          python manage.py showmigrations > debug-info/migrations/migration-status.txt || true
          
          # Copy migration files for analysis
          for app in */migrations/; do
            if [ -d "$app" ]; then
              mkdir -p "debug-info/$app"
              cp "$app"*.py "debug-info/$app" || true
            fi
          done
          
          # List created debug info
          echo "Debug information collected:"
          find debug-info -type f | sort
      
      - name: Upload test results and debug info
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: django-test-debug-info
          path: debug-info/
          retention-days: 5
  
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: List workspace contents
        run: |
          echo "Workspace contents:"
          ls -la
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9.18'
      
      - name: Verify Python installation
        run: |
          echo "Python version: $(python --version)"
          echo "Pip version: $(pip --version)"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Installed packages:"
          pip list
      
      - name: Setup environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting up PRODUCTION environment"
            cp .env.example .env
            echo "DEBUG=False" >> .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY || 'default-key-for-build' }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS || 'localhost,127.0.0.1' }}" >> .env
          else
            echo "Setting up DEVELOPMENT environment"
            cp .env.example .env
            echo "DEBUG=True" >> .env
            echo "DJANGO_SECRET_KEY=dev-key-for-build" >> .env
            echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env
          fi
          echo "Environment file created. Contents (excluding sensitive info):"
          cat .env | grep -v "SECRET\|KEY\|PASSWORD"
      
      - name: Check Django setup for build
        run: |
          echo "Checking Django setup for build..."
          python manage.py check --deploy --verbosity=2 || echo "Django check failed, but continuing..."
        continue-on-error: true
      
      - name: Collect static files
        run: |
          echo "Collecting static files..."
          python manage.py collectstatic --noinput --verbosity=2 || echo "Collectstatic failed, but continuing..."
        continue-on-error: true
      
      - name: Prepare build directory
        run: |
          echo "Preparing build directory..."
          mkdir -p build
          echo "Copying Python files..."
          find . -name "*.py" -not -path "./build/*" -exec cp --parents {} build/ \; || true
          echo "Copying requirements and configurations..."
          cp -r *.txt build/ || echo "No .txt files found"
          cp -r *.json build/ || echo "No .json files found"
          cp .env build/ || echo "No .env file found"
          
          echo "Copying Python packages and directories..."
          for dir in */; do
            if [ -d "$dir" ] && [ "$dir" != "build/" ] && [ -f "${dir}__init__.py" ]; then
              echo "Copying package: $dir"
              cp -r "$dir" build/ || echo "Failed to copy $dir"
            fi
          done
          
          echo "Build directory contents:"
          find build -type f | sort
      
      - name: Validate build artifacts
        run: |
          echo "Validating build artifacts..."
          cd build
          if [ ! -f "manage.py" ]; then
            echo "ERROR: manage.py not found in build directory!"
            ls -la
            exit 1
          fi
          
          echo "Checking for essential Python packages..."
          find . -name "__init__.py" | sort
          
          echo "Checking for settings module..."
          find . -name "settings.py" | sort
          
          echo "Build appears to be valid."
      
      - name: Create build info
        run: |
          echo "Creating build information file..."
          BUILD_INFO="build/build-info.txt"
          echo "Build created: $(date)" > $BUILD_INFO
          echo "Repository: ${{ github.repository }}" >> $BUILD_INFO
          echo "Branch: ${{ github.ref }}" >> $BUILD_INFO
          echo "Commit: ${{ github.sha }}" >> $BUILD_INFO
          echo "Build Info file created:"
          cat $BUILD_INFO
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: django-build
          path: build/
          retention-days: 3
  
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' && always()
    steps:
      - name: Checkout code for deployment scripts
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: django-build
          path: ./deploy
      
      - name: Verify deployment files
        run: |
          echo "Verifying deployment files..."
          echo "Deployment directory contents:"
          find ./deploy -type f | sort
          
          if [ ! -f "./deploy/manage.py" ]; then
            echo "ERROR: manage.py not found in deployment directory!"
            exit 1
          fi
      
      - name: Debug deployment environment
        run: |
          echo "Debugging deployment environment..."
          echo "Deployment target: DEVELOPMENT"
          echo "Service ID: ${{ secrets.RENDER_DEV_SERVICE_ID || 'Not set' }}"
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "WARNING: RENDER_API_KEY secret is not set!"
          else
            echo "RENDER_API_KEY is set"
          fi
      
      - name: Deploy to Render.com Dev
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_DEV_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait: true
  
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && always()
    steps:
      - name: Checkout code for deployment scripts
        uses: actions/checkout@v3
      
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: django-build
          path: ./deploy
      
      - name: Verify deployment files
        run: |
          echo "Verifying deployment files..."
          echo "Deployment directory contents:"
          find ./deploy -type f | sort
          
          if [ ! -f "./deploy/manage.py" ]; then
            echo "ERROR: manage.py not found in deployment directory!"
            exit 1
          fi
      
      - name: Debug deployment environment
        run: |
          echo "Debugging deployment environment..."
          echo "Deployment target: PRODUCTION"
          echo "Service ID: ${{ secrets.RENDER_PROD_SERVICE_ID || 'Not set' }}"
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "WARNING: RENDER_API_KEY secret is not set!"
          else
            echo "RENDER_API_KEY is set"
          fi
      
      - name: Deploy to Render.com Production
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_PROD_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait: true
  
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [debug-workflow, test, build, deploy-prod, deploy-dev]
    if: always()
    steps:
      - name: Collect workflow status
        id: status
        run: |
          echo "DEBUG JOB: ${{ needs.debug-workflow.result }}"
          echo "TEST JOB: ${{ needs.test.result }}"
          echo "BUILD JOB: ${{ needs.build.result }}"
          echo "DEPLOY-DEV JOB: ${{ needs.deploy-dev.result }}"
          echo "DEPLOY-PROD JOB: ${{ needs.deploy-prod.result }}"
          
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "workflow_status=failure" >> $GITHUB_OUTPUT
            echo "WORKFLOW RESULT: FAILURE"
          else
            echo "workflow_status=success" >> $GITHUB_OUTPUT
            echo "WORKFLOW RESULT: SUCCESS"
          fi
      
      - name: Notify workflow status
        if: steps.status.outputs.workflow_status == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo, owner } = context.repo;
            const run_id = context.runId;
            
            try {
              console.log('Creating issue for workflow failure...');
              
              const jobs = {
                'debug-workflow': '${{ needs.debug-workflow.result }}',
                'test': '${{ needs.test.result }}',
                'build': '${{ needs.build.result }}',
                'deploy-dev': '${{ needs.deploy-dev.result }}',
                'deploy-prod': '${{ needs.deploy-prod.result }}'
              };
              
              const failedJobs = Object.entries(jobs)
                .filter(([_, result]) => result === 'failure')
                .map(([name, _]) => name)
                .join(', ');
              
              const issueResponse = await github.rest.issues.create({
                owner,
                repo,
                title: `🚨 워크플로우 실패: ${context.workflow}`,
                body: `**워크플로우가 실패했습니다.**
                
                - **저장소:** ${owner}/${repo}
                - **워크플로우:** ${context.workflow}
                - **커밋:** ${context.sha}
                - **브랜치:** ${context.ref}
                - **실패한 작업:** ${failedJobs}
                - **상세 정보:** https://github.com/${owner}/${repo}/actions/runs/${run_id}
                
                이 이슈는 자동으로 생성되었습니다.`
              });
              
              console.log('Issue created successfully:', issueResponse.data.html_url);
            } catch (error) {
              console.error('Error creating issue:', error);
              console.error('Error message:', error.message);
              return;
            } 