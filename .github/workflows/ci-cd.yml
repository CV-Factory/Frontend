name: CVFactory CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

# 기본 권한 설정
permissions:
  contents: read
  issues: write # 이슈 생성을 위한 권한 추가

# 전역 환경 변수
env:
  LOG_LEVEL: debug
  PYTHON_VERSION: '3.9.18'

jobs:
  # ======== 환경 디버깅 작업 ========
  debug:
    name: Debug Environment
    runs-on: ubuntu-latest
    outputs:
      runner_os: ${{ steps.debug_info.outputs.runner_os }}
      python_version: ${{ steps.debug_info.outputs.python_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Get GitHub context
        id: debug_info
        run: |
          echo "================ GITHUB CONTEXT DEBUG ================"
          echo "Event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "SHA: ${{ github.sha }}"
          echo "Workspace: ${{ github.workspace }}"
          
          echo "================ RUNNER INFO ================"
          echo "OS: ${{ runner.os }}"
          echo "runner_os=${{ runner.os }}" >> $GITHUB_OUTPUT
          echo "Python version: ${{ env.PYTHON_VERSION }}"
          echo "python_version=${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
          
          echo "================ DIRECTORY STRUCTURE ================"
          ls -la
          pwd
          
          echo "================ FILE SYSTEM INFO ================"
          df -h
          
          echo "================ NETWORK INFO ================"
          curl -sI https://github.com | head -n 5
          echo "Network check complete"
      
      - name: Create debug report
        run: |
          mkdir -p debug-report
          # System info
          echo "================ SYSTEM INFO ================" > debug-report/system.txt
          uname -a >> debug-report/system.txt
          cat /etc/os-release >> debug-report/system.txt
          
          # Environment variables
          echo "================ ENV VARIABLES ================" > debug-report/env.txt
          env | sort >> debug-report/env.txt
          
          # Memory info
          echo "================ MEMORY INFO ================" > debug-report/memory.txt
          free -h >> debug-report/memory.txt
          
          echo "Debug report created"
          ls -la debug-report/
      
      - name: Upload debug report
        uses: actions/upload-artifact@v4
        with:
          name: debug-report
          path: debug-report

  # ======== Django 테스트 작업 ========
  test:
    name: Test Django Application
    needs: debug
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.debug.outputs.python_version }}
      
      - name: Log Python setup
        run: |
          echo "================ PYTHON SETUP INFO ================"
          python --version
          pip --version
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.path)"
      
      - name: Log directory structure
        run: |
          echo "================ PROJECT STRUCTURE ================"
          find . -type f -not -path "*/\.*" | sort
          
          echo "================ DJANGO FILES ================"
          find . -name "*.py" | grep -v "__pycache__" | sort
      
      - name: Install dependencies
        run: |
          echo "================ DEPENDENCY INSTALLATION ================"
          python -m pip install --upgrade pip
          echo "Pip upgraded."
          
          if [ -f requirements.txt ]; then
            echo "Installing from requirements.txt..."
            cat requirements.txt
            pip install -r requirements.txt
            echo "Dependencies installed successfully."
          else
            echo "ERROR: requirements.txt not found!"
            exit 1
          fi
          
          echo "Installed packages:"
          pip list
      
      - name: Prepare test environment
        run: |
          echo "================ ENVIRONMENT SETUP ================"
          
          echo "Creating .env file for testing..."
          # 직접 .env 파일 생성 (기존 .env.example 사용하지 않음)
          cat > .env << 'EOF'
          DEBUG=True
          DJANGO_SECRET_KEY=test-secret-key-for-ci
          ALLOWED_HOSTS=localhost,127.0.0.1,testserver
          DB_ENGINE=django.db.backends.sqlite3
          DB_NAME=db.sqlite3
          LOG_LEVEL=INFO
          EOF
          
          echo ".env file created. Preview:"
          grep -v "SECRET\|PASSWORD" .env
      
      - name: Django verification
        id: django_check
        run: |
          echo "================ DJANGO PROJECT VERIFICATION ================"
          echo "Checking Django project structure..."
          
          if [ -f manage.py ]; then
            echo "manage.py found:"
            cat manage.py | head -n 10
            
            echo "Checking Django version..."
            python -c "import django; print('Django version:', django.__version__)"
            
            echo "Looking for settings module..."
            grep -r "DJANGO_SETTINGS_MODULE" . --include="*.py" || echo "Settings module reference not found in files"
            
            echo "Checking Django project configuration..."
            python manage.py check --verbosity 2 || echo "Django check command failed, but continuing..."
            
            echo "django_check=success" >> $GITHUB_OUTPUT
          else
            echo "ERROR: manage.py not found! Not a Django project or wrong directory."
            echo "django_check=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Django settings debug
        if: steps.django_check.outputs.django_check == 'success'
        run: |
          echo "================ DJANGO SETTINGS DEBUG ================"
          python -c "
          import os, sys, django, json
          
          try:
              print('DJANGO_SETTINGS_MODULE current value:', os.environ.get('DJANGO_SETTINGS_MODULE', 'Not set'))
              
              # Try to detect settings module
              if os.path.isfile('manage.py'):
                  with open('manage.py', 'r') as f:
                      content = f.read()
                      if 'DJANGO_SETTINGS_MODULE' in content:
                          print('Settings module found in manage.py')
                      
              # Use standard settings module location for Django projects
              os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cvfactory.settings')
              print('DJANGO_SETTINGS_MODULE set to:', os.environ.get('DJANGO_SETTINGS_MODULE'))
              
              django.setup()
              
              from django.conf import settings
              
              # Print key Django settings
              config = {
                  'DEBUG': settings.DEBUG,
                  'DATABASES_ENGINE': settings.DATABASES['default']['ENGINE'],
                  'DATABASES_NAME': settings.DATABASES['default']['NAME'],
                  'INSTALLED_APPS': settings.INSTALLED_APPS,
                  'MIDDLEWARE': settings.MIDDLEWARE,
                  'ALLOWED_HOSTS': settings.ALLOWED_HOSTS,
                  'TEMPLATES_BACKEND': settings.TEMPLATES[0]['BACKEND'] if settings.TEMPLATES else None,
              }
              
              print('Django settings loaded successfully. Configuration:')
              print(json.dumps(config, indent=2, default=str))
              
          except Exception as e:
              print('ERROR loading Django settings:', str(e))
              import traceback
              traceback.print_exc()
              sys.exit(0)  # Don't fail the workflow
          "
      
      - name: Run migrations
        if: steps.django_check.outputs.django_check == 'success'
        run: |
          echo "================ DATABASE MIGRATIONS ================"
          echo "Running database migrations..."
          
          echo "Current migration status:"
          python manage.py showmigrations || echo "Failed to show migrations"
          
          echo "Applying migrations..."
          python manage.py migrate --noinput --verbosity 2 || echo "Migration failed, but continuing..."
          
          echo "Final migration status:"
          python manage.py showmigrations || echo "Failed to show migrations"
      
      - name: Test Groq Client Initialization
        if: steps.django_check.outputs.django_check == 'success'
        run: |
          echo "================ GROQ CLIENT TEST ================"
          echo "Testing Groq client initialization to detect proxies parameter issue..."
          
          # Get Groq library info
          python -c "import groq; print(f'Groq 버전: {getattr(groq, \"__version__\", \"버전 정보 없음\")}'); print(f'Groq 모듈 경로: {getattr(groq, \"__file__\", \"경로 정보 없음\")}')"
          
          # Create a simple test script
          cat > test_groq.py << 'EOF'
          import groq
          import inspect
          import sys
          
          print("===== Groq Client 초기화 테스트 =====")
          
          # 클라이언트 파라미터 검사
          print("클라이언트 초기화 파라미터 목록:")
          client_params = inspect.signature(groq.Client.__init__).parameters
          print([param for param in client_params.keys()])
          
          # proxies 파라미터 확인
          has_proxies = 'proxies' in client_params
          print(f"proxies 파라미터 존재함: {has_proxies}")
          
          # 상속 구조 확인
          print("\n클래스 상속 구조:")
          mro = groq.Client.__mro__
          print([cls.__name__ for cls in mro])
          
          # 테스트 초기화
          print("\n기본 초기화 테스트:")
          try:
              client = groq.Client(api_key="테스트키")
              print("✅ 기본 초기화 성공")
          except TypeError as e:
              print(f"❌ 초기화 실패: {e}")
              if "unexpected keyword argument 'proxies'" in str(e):
                  print("✱ proxies 파라미터 문제 감지됨")
                  print("\n대체 방식 테스트:")
                  try:
                      # client_kwargs에서 proxies 제외
                      valid_params = {name: param for name, param in client_params.items() if name not in ['self', 'proxies']}
                      filtered_kwargs = {"api_key": "테스트키"}
                      filtered_kwargs = {k: v for k, v in filtered_kwargs.items() if k in valid_params}
                      client = groq.Client(**filtered_kwargs)
                      print("✅ 대체 방식 초기화 성공")
                  except Exception as e2:
                      print(f"❌ 대체 방식도 실패: {e2}")
              else:
                  print(f"✱ 다른 종류의 오류: {e}")
          
          print("\n테스트 완료!")
          EOF
          
          # Run the test script
          python test_groq.py
          
          # Create a simple usage test
          echo "Testing Groq client in Django environment..."
          cat > test_groq_django.py << 'EOF'
          import os
          import django
          import groq
          
          # Django 환경 설정
          os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'cvfactory.settings')
          django.setup()
          
          # 실제 app 모듈에서와 같은 방식으로 초기화 시도
          print("Django 환경에서 Groq 클라이언트 초기화 시도...")
          try:
              client = groq.Client(api_key="테스트키")
              print("✅ Django 환경에서 초기화 성공")
          except Exception as e:
              print(f"❌ Django 환경에서 초기화 실패: {e}")
          EOF
          
          # Run in Django environment
          python test_groq_django.py || echo "Django environment test failed, but continuing..."
      
      - name: Run tests
        if: steps.django_check.outputs.django_check == 'success'
        run: |
          echo "================ DJANGO TESTS ================"
          echo "Running Django tests..."
          
          # Create test log directory
          mkdir -p test-logs
          
          # Run tests with highest verbosity
          python manage.py test --verbosity=3 2>&1 | tee test-logs/django-tests.log || echo "Tests failed, but continuing..."
          
          echo "Test logs created:"
          ls -la test-logs/
      
      - name: Collect test reports
        if: always()
        run: |
          echo "================ COLLECTING TEST DATA ================"
          mkdir -p test-results
          
          # Copy logs
          if [ -d "test-logs" ]; then
            cp -r test-logs/* test-results/ || true
          fi
          
          # Collect Groq test results
          if [ -f "test_groq.py" ]; then
            echo "Collecting Groq test results..."
            python test_groq.py > test-results/groq-client-test.log 2>&1 || true
            python test_groq_django.py > test-results/groq-django-test.log 2>&1 || true
          fi
          
          # Collect Django logs
          find . -name "*.log" -exec cp {} test-results/ \; || true
          
          # Database info
          if [ -f "db.sqlite3" ]; then
            echo "Database file found, collecting info..."
            sqlite3 db.sqlite3 ".tables" > test-results/db-tables.txt || true
            sqlite3 db.sqlite3 ".schema" > test-results/db-schema.txt || true
          fi
          
          # Environment info
          echo "Python version: $(python --version)" > test-results/python-info.txt
          pip freeze > test-results/pip-packages.txt
          
          echo "Test results collected:"
          find test-results -type f | sort
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results

  # ======== Django 빌드 작업 ========
  build:
    name: Build Django Application
    needs: [debug, test]
    runs-on: ubuntu-latest
    if: ${{ !failure() }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ needs.debug.outputs.python_version }}
      
      - name: Log environment
        run: |
          echo "================ BUILD ENVIRONMENT ================"
          echo "Branch: ${{ github.ref }}"
          echo "Workspace: ${{ github.workspace }}"
          echo "Python: $(python --version)"
          echo "OS: $(uname -a)"
      
      - name: Install dependencies
        run: |
          echo "================ INSTALLING DEPENDENCIES ================"
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          echo "Installed packages:"
          pip list
      
      - name: Prepare environment
        run: |
          echo "================ PREPARING ENVIRONMENT ================"
          
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting up PRODUCTION environment"
            # 직접 .env 파일 생성 (기존 .env.example 사용하지 않음)
            cat > .env << 'EOF'
            DEBUG=False
            ALLOWED_HOSTS=localhost,127.0.0.1
            DB_ENGINE=django.db.backends.sqlite3
            DB_NAME=db.sqlite3
            LOG_LEVEL=INFO
            EOF
            
            # Add secrets if available, otherwise use defaults
            if [ -n "${{ secrets.DJANGO_SECRET_KEY }}" ]; then
              echo "Using production secret key from secrets"
              echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            else
              echo "WARNING: Using default secret key - NOT SECURE for production!"
              echo "DJANGO_SECRET_KEY=default-production-key-change-me" >> .env
            fi
            
            if [ -n "${{ secrets.ALLOWED_HOSTS }}" ]; then
              echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            fi
          else
            echo "Setting up DEVELOPMENT environment"
            # 직접 .env 파일 생성 (기존 .env.example 사용하지 않음)
            cat > .env << 'EOF'
            DEBUG=True
            DJANGO_SECRET_KEY=dev-build-key
            ALLOWED_HOSTS=localhost,127.0.0.1
            DB_ENGINE=django.db.backends.sqlite3
            DB_NAME=db.sqlite3
            LOG_LEVEL=INFO
            EOF
          fi
          
          echo "Environment prepared. Preview (excluding sensitive data):"
          grep -v "SECRET\|PASSWORD" .env
      
      - name: Collect static files
        run: |
          echo "================ COLLECTING STATIC FILES ================"
          
          # Ensure static directory exists
          mkdir -p static
          
          # Try to collect static files
          python manage.py collectstatic --noinput --verbosity 2 || echo "Collectstatic failed, but continuing..."
          
          # Check result
          if [ -d "staticfiles" ]; then
            echo "Static files collected to staticfiles directory:"
            find staticfiles -type f | wc -l
            echo "Sample static files:"
            find staticfiles -type f | head -n 5
          elif [ -d "static" ]; then
            echo "Static files in static directory:"
            find static -type f | wc -l
          else
            echo "WARNING: No static files directory found after collection."
          fi
      
      - name: Prepare build
        run: |
          echo "================ PREPARING BUILD ================"
          
          # Create build directory
          mkdir -p build
          
          echo "Copying Python files..."
          find . -name "*.py" -not -path "*/\.*" -not -path "*/venv/*" -exec cp --parents {} build/ \; || true
          
          echo "Copying requirements and configuration..."
          cp requirements.txt build/ || echo "No requirements.txt found"
          cp .env build/ || echo "No .env file found"
          
          echo "Copying static and template files..."
          if [ -d "static" ]; then cp -r static build/ || true; fi
          if [ -d "staticfiles" ]; then cp -r staticfiles build/ || true; fi
          if [ -d "templates" ]; then cp -r templates build/ || true; fi
          
          echo "Copying media files if they exist..."
          if [ -d "media" ]; then cp -r media build/ || true; fi
          
          # Copy Django app directories
          for dir in */; do
            if [ -f "${dir}__init__.py" ] && [ "$dir" != "build/" ] && [ "$dir" != "venv/" ]; then
              echo "Copying Django app: $dir"
              cp -r "$dir" build/ || echo "Failed to copy $dir"
            fi
          done
          
          # Create build metadata
          BUILD_INFO="build/build_info.txt"
          echo "Build created: $(date)" > $BUILD_INFO
          echo "Repository: ${{ github.repository }}" >> $BUILD_INFO
          echo "Branch: ${{ github.ref }}" >> $BUILD_INFO
          echo "Commit: ${{ github.sha }}" >> $BUILD_INFO
          
          echo "Build directory created. Contents:"
          find build -type f | sort | head -n 20
          echo "Total files: $(find build -type f | wc -l)"
      
      - name: Validate build
        run: |
          echo "================ VALIDATING BUILD ================"
          
          cd build
          
          # Check essential files
          if [ ! -f "manage.py" ]; then
            echo "ERROR: manage.py not found in build!"
            exit 1
          fi
          
          echo "Checking for settings module..."
          settings_files=$(find . -name "settings.py")
          if [ -z "$settings_files" ]; then
            echo "WARNING: No settings.py file found in build!"
          else
            echo "Settings found: $settings_files"
          fi
          
          echo "Build validation complete."
      
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: django-build
          path: build/

  # ======== Render.com 배포 작업 ========
  deploy:
    name: Deploy to Render.com
    needs: [debug, build]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log deployment start
        run: |
          echo "================ DEPLOYMENT STARTED ================"
          echo "Branch: ${{ github.ref }}"
          echo "Deployment type: DEVELOPMENT"
          echo "Deployment time: $(date)"
      
      - name: Download build
        uses: actions/download-artifact@v4
        with:
          name: django-build
          path: deploy
      
      - name: Validate deployment files
        run: |
          echo "================ VALIDATING DEPLOYMENT FILES ================"
          echo "Deployment directory contents:"
          find deploy -type f | sort | head -n 20
          echo "Total files: $(find deploy -type f | wc -l)"
          
          if [ ! -f "deploy/manage.py" ]; then
            echo "ERROR: manage.py not found in deployment directory!"
            exit 1
          fi
          
          echo "Deployment validation complete."
      
      - name: Test Groq compatibility before deployment
        run: |
          echo "================ TESTING GROQ COMPATIBILITY ================"
          cd deploy
          
          # Set up environment
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Create a test script
          cat > test_deploy_groq.py << 'EOF'
          import groq
          import inspect
          import sys
          import traceback
          
          print("===== 배포 전 Groq 호환성 테스트 =====")
          print(f"Groq 버전: {getattr(groq, '__version__', '버전 정보 없음')}")
          
          # 클라이언트 파라미터 검사
          print("클라이언트 초기화 파라미터 목록:")
          try:
              client_params = inspect.signature(groq.Client.__init__).parameters
              print([param for param in client_params.keys()])
              
              # proxies 파라미터 확인
              has_proxies = 'proxies' in client_params
              print(f"proxies 파라미터 존재함: {has_proxies}")
              
              # 테스트 초기화
              print("\n배포 환경에서 초기화 테스트:")
              try:
                  client = groq.Client(api_key="테스트키")
                  print("✅ 배포 환경에서 초기화 성공")
              except TypeError as e:
                  print(f"❌ 초기화 실패: {e}")
                  if "unexpected keyword argument 'proxies'" in str(e):
                      print("‼ proxies 파라미터 문제 발견 - 실제 배포 환경에서 오류 발생 가능성 높음")
                      print("  대체 방식으로 시도해야 함")
                  else:
                      print(f"‼ 다른 종류의 오류: {e}")
              except Exception as e:
                  print(f"❌ 다른 예외 발생: {e}")
                  traceback.print_exc()
          except Exception as e:
              print(f"❌ 파라미터 검사 중 오류: {e}")
              traceback.print_exc()
          
          print("\n테스트 완료!")
          EOF
          
          # Run the test
          python test_deploy_groq.py
          
          # Return to previous directory
          cd ..
          
          echo "Groq compatibility test completed."
      
      - name: Check Render.com credentials
        id: check_creds
        run: |
          echo "Checking Render.com credentials..."
          
          # Development credentials
          if [ -z "${{ secrets.RENDER_DEV_SERVICE_ID }}" ]; then
            echo "ERROR: RENDER_DEV_SERVICE_ID secret is not set!"
            echo "credential_check=failure" >> $GITHUB_OUTPUT
          elif [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "ERROR: RENDER_API_KEY secret is not set!"
            echo "credential_check=failure" >> $GITHUB_OUTPUT
          else
            echo "Development deployment credentials verified."
            echo "credential_check=success" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy to Render.com Development
        if: steps.check_creds.outputs.credential_check == 'success'
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_DEV_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait: true
      
      - name: Log deployment result
        if: always()
        run: |
          echo "================ DEPLOYMENT COMPLETED ================"
          echo "Deployment status: ${{ job.status }}"
          echo "Deployment completed at: $(date)"
          
          # Create deployment report
          mkdir -p deployment-report
          echo "Deployment Report" > deployment-report/summary.txt
          echo "================" >> deployment-report/summary.txt
          echo "Branch: ${{ github.ref }}" >> deployment-report/summary.txt
          echo "Environment: DEVELOPMENT" >> deployment-report/summary.txt
          echo "Status: ${{ job.status }}" >> deployment-report/summary.txt
          echo "Time: $(date)" >> deployment-report/summary.txt
          
          echo "Deployment report created:"
          cat deployment-report/summary.txt
      
      - name: Upload deployment report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report

  # ======== 결과 알림 작업 ========
  notify:
    name: Send Notification
    needs: [debug, test, build, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Collect job statuses
        id: status
        run: |
          echo "================ WORKFLOW RESULTS ================"
          echo "Debug job: ${{ needs.debug.result }}"
          echo "Test job: ${{ needs.test.result }}"
          echo "Build job: ${{ needs.build.result }}"
          echo "Deploy job: ${{ needs.deploy.result }}"
          
          # Check if any job failed
          if [[ "${{ needs.debug.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.build.result }}" == "failure" ]] || \
             [[ "${{ needs.deploy.result }}" == "failure" ]]; then
            echo "workflow_status=failure" >> $GITHUB_OUTPUT
            echo "FINAL RESULT: FAILURE"
          else
            echo "workflow_status=success" >> $GITHUB_OUTPUT
            echo "FINAL RESULT: SUCCESS"
          fi
          
          # Prepare job results for notification
          results="Debug: ${{ needs.debug.result }}\n"
          results+="Test: ${{ needs.test.result }}\n"
          results+="Build: ${{ needs.build.result }}\n"
          results+="Deploy: ${{ needs.deploy.result }}"
          echo "job_results<<EOF" >> $GITHUB_OUTPUT
          echo -e "$results" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Issue on Failure
        if: steps.status.outputs.workflow_status == 'failure'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              console.log('Creating issue for workflow failure...');
              
              const jobResults = `${{ steps.status.outputs.job_results }}`;
              const failedJobs = jobResults
                .split('\n')
                .filter(line => line.includes('failure'))
                .map(line => line.split(':')[0])
                .join(', ');
              
              const issueResponse = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🚨 워크플로우 실패: ${context.workflow}`,
                body: `**워크플로우가 실패했습니다.**

                - **저장소:** ${context.repo.owner}/${context.repo.repo}
                - **워크플로우:** ${context.workflow}
                - **커밋:** ${context.sha}
                - **브랜치:** ${context.ref}
                - **실패한 작업:** ${failedJobs}
                - **상세 정보:** https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
                
                **작업 결과:**
                \`\`\`
                ${jobResults}
                \`\`\`
                
                이 이슈는 자동으로 생성되었습니다.`
              });
              
              console.log(`Issue created: ${issueResponse.data.html_url}`);
            } catch (error) {
              console.error('Error creating issue:', error);
              console.error('Error message:', error.message);
            }
      
      - name: Log final status
        run: |
          echo "================ WORKFLOW COMPLETED ================"
          echo "Final status: ${{ steps.status.outputs.workflow_status }}"
          echo "Job results:"
          echo "${{ steps.status.outputs.job_results }}"
          echo "Workflow URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" 