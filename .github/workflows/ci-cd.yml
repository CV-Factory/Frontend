name: CVFactory CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.7'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set environment based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting production environment"
            cp .env.example .env
            echo "DEBUG=False" >> .env
          else
            echo "Setting development environment"
            cp .env.example .env
            echo "DEBUG=True" >> .env
          fi
      
      - name: Run tests
        run: |
          python manage.py test
  
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.7'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Set environment based on branch
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Setting production environment"
            cp .env.example .env
            # 배포 환경에서는 실제 API 키 등을 GitHub Secrets에서 가져와 설정
            echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
            echo "API_KEY=${{ secrets.API_KEY }}" >> .env
            echo "CSRF_TRUSTED_ORIGINS=${{ secrets.CSRF_TRUSTED_ORIGINS }}" >> .env
            echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> .env
            echo "DEBUG=False" >> .env
          else
            echo "Setting development environment"
            cp .env.example .env
            echo "DJANGO_SECRET_KEY=${{ secrets.DEV_DJANGO_SECRET_KEY }}" >> .env
            echo "ALLOWED_HOSTS=${{ secrets.DEV_ALLOWED_HOSTS }}" >> .env
            echo "DEBUG=True" >> .env
            # 개발 환경 설정
            echo "GOOGLE_CLIENT_ID=dummy-dev-client-id" >> .env
            echo "GOOGLE_CLIENT_SECRET=dummy-dev-client-secret" >> .env
            echo "GROQ_API_KEY=dummy-dev-groq-api-key" >> .env
          fi
      
      - name: Collect static files
        run: python manage.py collectstatic --noinput
      
      - name: Run migrations
        run: python manage.py migrate --noinput
      
      - name: Create logs directory with proper permissions
        run: |
          mkdir -p logs
          chmod -R 755 logs
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .
            !.git
            !.github
  
  deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Deploy to Render.com Development Environment
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_DEV_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait: true
  
  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: .
      
      - name: Deploy to Render.com Production Environment
        uses: JorgeLNJunior/render-deploy@v1.4.3
        with:
          service_id: ${{ secrets.RENDER_PROD_SERVICE_ID }}
          api_key: ${{ secrets.RENDER_API_KEY }}
          wait: true 